I. .NET SDK (Software Development Kit)
- A bunch of tools need to install to developer machine to support for development of projects (apply for every programing
language)
- .NET SDK contains:
  - .NET tools used by Developer (dev)
  - RUNTIME enviroment - tool/program to support for running .NET APP
  - .NET APP can be developed by using C#, VB .NET, C++ .NET, F#

II. ALLOCATE A FOLDER TO STORE YOUR SOURCE CODE
- DO NOT USE VIETNAMESE/UNICODE CHARACTER TO NAME THE FOLDER TO STORE THE CODE (or you will get the error during the 
compilation of source code), THIS APPLIES FOR ALL OF PROGRAMING LANGUAGE
- WRONG: KÌ 5\
- OKIE: KI 5, KI-5, KI_5
- OKIE: SEMESTER5, SEM-5, SEM_5

HERE IS THE SUGGESTION FOR STORING THE HANDS-ON SOURCE CODE

Session01-HelloCS
Session02-Language
Session03-OOP   (delegate, LINQ - StreamAPI)
		 functional programming
		 Lambda Expressing)
...

III. SOLUTION and PROJECT
1. PROJECT: A PROJECT WILL CONSIT/HAVE MULTIPLE SOURCE CODE FILES (.CS)
	    TO SOVLE A SPECIFIC THING, E.G

	    A PROJECT IS CREATE TO OFFER THE DATABASE ACTIVITIES
			LIKE CRUD - CREATE/RETRIEVE-READ/UPDATE/DELETE

	    A PROJECT IS RESPONSIBILITY FOR SHOWING THE UI/DATA TO THE END-USER

	    A PROJECT IS DESIGNED TO MANAGE AUTHENTICATION ACTIVITIES

	    A PROJECT IS DESIGNED TO MANAGE ALL PAYMENT ACTIVITIES
	
* EACH PROJECT IS DESIGN  TO DO A SPECIFIC TASK
	"DIVIDE & CONQUER" -> EASIER TO MANAGE DEVELOPMENT TEAM/DEVELOPMENT TASK
				FOR MAINTERNACE ACTIVITIES
2. SOLUTION: IS THE ANSWER TO THE END-USER
	     IS AN APPLICATION THAT WE OFFER TO THE MARKET, TO THE END-USER
	CONSITS OF
	CONTAINS OF MULTIPLE PROJECTS
EX:	FIFA GAME

	LEAGUE OF LEGENDS - APP/SOFTWARE (PLAYER VIEW)	SOLUTION (DEV VIEW)
			    - exe file			AUTHENTICATION PROJECT
			    - dll			TRADING MARKET PROJECT
			    - dll			ADMIN PROJECT
			    - dll			ROUND-1/LEVEL-1 PROJECT
3. A SOLUTION WILL HAVE MULTIPLES PROJECTS
   A PROJECT WILL PRODUCE A .DLL OR .EXE FILE
   A DLL WILL HAVE MULTIPLE  .CS FILES INSIDE (USE DOTPEEK TO CHECK)
   A PROJECT WILL HAVE MULTIPLE NAMESPACES
   A NAMESPACE WILL HAVE MULTIPLE CLASSES
   A CLASS WILL HAVE MULTIPLE METHODS/FUNCTIONS

4. NAMESPACE (JAVA PACKAGE)
- A TECHNIQ TO GROUP/TO CLASSIFY THE RELATIVE CLASSES
	WE DIVIDE/CATEGORIZE ALL RELATIVE CLASSES INTO A GROUP, GIVE EACH GROUP
	A NAME. THIS NAME/THE NAME OF EACH GROUP OF CLASSES IS SO CALLED
		NAMESPACE
- A NAMESPACE IS THE NAME OF A GROUP OF CLASSES
    NAME FOR A GROUP OF CLASSES
* BENEFIT TO USE NAMESPACE: TO AVOID THE NAME COLLISSION BETWEEN MULTIPLE CLASSES
	2 CLASSES IN A PROJECT CAN HAVE THE SAME NAME, BUT IN DIFFERENT NAMESPACE

* BY DEFAULT, THE NAME OF PROJECT, THE ROOT FOLDER OF PROJECT IS USED TO NAME THE NAMESPACE

IV. CODING CONVENTION - YOU MUST FOLLOW OR YOU WILL GET A FINE/A CHECK VAR
1. THE SOLUTION NAME AND PROJECT NAME
- NOUN
- ...

2. THE NAMESPACE NAME (PACKAGE IN JAVA)
- NOUN
- JAVA: com.mycompany.myproject.mymodule; import com.mycompany. ;
	com.microsoft.sqlserver.jdbc.
	LOWER CASE, in reverse order
- C#: (Pasacal Case Notation with . and in the natural order)
	Microsoft.SqlServer.AdoNet....
	Bmi
	FU.Bmi
3. THE CLASS NAME
- NOUN STANDS FOR A TYPE, A CATEGORY, A CLASSIFICATION
- Pasacal Case Notation, a multiple words, each 1st letter of each word is UPPER CASE
  Bmi BMI, BmiCalculator, Repository, DataAccessLayer

4. THE METHOD NAME
- VERB + OBJECT
- Pasacal Case Notation (but in Java, camel Case Notation)
  GetBmi()			getBmi()
  Main()			main()

5. THE VARIABLE NAME
- For the local variable, (the var is declared inside the method/function)
- NOUN
- camel Case Notation (the same with Java)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SPINOFF - NGOẠI TRUYỆN
YOUR INSTALLTION GAME FOLDER					HEALTH AND FATE
IN YOUR SSD/HDD DRIVE						(DOTNET BUILD...)

    .EXE FILE - THE ENTRY TO ENTER				.EXE
		THE GAME
		A LINK TO A SHORT CUT IN THE DESKTOP
    .DLL   - A LIBRARY						.DLL (BMI CALCULATOR)
    .DLL   - A DEPENDENCY					.DLL
    .DLL   - AN ASSEMBLY
    .DLL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
V. OOP - Object Oriented Paradigm	(Mindset - The way we think)
			 Programming	(An approach - 1 cách tiếp cận)

WE WORK WITH OBJECTS, WE DEFINE OBJECTS DURING THE PROGRAMMING PROCESS
WHAT IS AN OBJECT???

1. BEFORE OOP IS ... PROCEDURAL PROGRAMMING LANGUAGE (C, PASCAL)
- PROCEDURAL/PROCEDURE: STEPS, A SET OF STEPS TO DO SOMETHING
(THỦ TỤC, TRÌNH TỰ, CÁC BƯỚC)
- C, PASCAL, TO PROCESS SOMETHING, WE DEFINE FUNCTIONS AND VARIABLES, BUT IN A FREE WAY

#include <library to be used in code>
#include <stdio.h>

//define variables - store the value before/after processing
//global variable
int yob;

//define functions - to process global vars, and local vars
int getAge()
{
	retrun 2024 - yob;
}

int main()
{
	to call the functions()
}
//PROBLEMS
//MULTIPLE FUNCTIONS CAN PLAY WITH THE SHARED VARIABLES - GLOBAL VARIABLES
//SIDE EFFECT (TÁC DỤNG PHỤ, HIỆU ỨNG LỀ) - WE CAN NOT CONTROL THE VALUE OF GLOBAL VARIABLE
IN A STRICLY WAY
//SINCE THERE ARE MULTIPLE FUNCTIONS CAN CHANGE IT

2. OOP COMES TO SOLVE...
EVERY THING, THING AROUND US COMES WITH TWO DIFFERENT FORMS
SỰ VẬT QUANH TA THỂ HIỆN QUA 2 HÌNH THỨC (FROM)
* 1ST FORM: A SINGLE VALUE
* 2ND FORM: A COMPLEX VALUE

* 1ST FORM: A SINGLE VALUE, E.G. 3.14, 9.8 (GRAVITY),
					300.000 KM/S (speed of a ligh(
					10%, 8% (VAT tax)
					50 km/h (speed of your moto)
					5 (passed grade)
	single value: it is only a value, stands some thing, and itself has a meaning, do not need extra
	effort to explain

* 2ND FORM: A COMPLEX VALUE - we can describe about it (THING) by its character, by its attributes,
by its properties, by using
the other single values
EX: Messi - 	FullName: Leonardo ___
		DOB: ___
		Homeland: Argentina
		Club: ___
		Awards: ___
		Number: 10
		Goals: ___
		...

	Car -	Model: ___
		Manufacture Date: ___
		Gas/km: ___
		Price: ___
		Settings: ___

- COMPLEX VALUE WE CALL IT AS AN OBJECT
AN OBJECT IS A THING AROUND US THAT HAS ITS OWN ATTRIBUTES, PROPERTIES

-------------------------------------------------------------------------------

WHAT HAPPEND IT WE HAVE MANY OJECTS, HOW TO MANAGE MANY OBJECTS IN A EFFECTIVE WAY
- car1(...), car2(...), dog1(...), dog2(...), phone1(...), phone2(...), person1(...), person2(...) ...

CLASSIFY (VERB), GROUP, CATEGORIZE OBJECTS IN TO APPROPRIATE GROUP, APPROPRIATE 
CLASS BASED ON THE COMMAND SHARE BETWEEN THEM

CLASS: THE NAME OF EACH GROUP, WHERE ALL OF THINGS BELONG TO THAT CLASS SHARE THE SAME ATTRIBUTES/PROPERTIES
CLASS: LÀ TÊN GỌI CỦA NHÓM OBJECT MÀ CÓ CHUNG ĐẶC ĐIỂM

there multiple objects that play the soccer, the football, like Messi, MBappe,
CR7... -> they belong to FOOTBALL/PLAYER CLASS

BMW, HONDA, TOYOTA... -> CAR CLASS

CLASS: IS A TEMPLATE, A BLUEPRINT, A MOLD (CÁI KHUÔN) TO ALLOW US TO GROUP MULTPLE INDENTICAL OBJECTS

STUDENT CLASS: ANY GUY THAT IS A COMPLEX VALUE, HAS ATTRIBUTES: 
		id: ___
		name: ___
		yob: ___
		major: ___
		gpa: ___
		courses: ___
		...
CLASS LIKE A FORM, A TEMPLATE TO MODEL ALL THINGS WITH THE IDENTICAL ATTRIBUTE
A NEW OBJECT, A NEW THING CAN BE CREATED FROM THIS TEMPLATE
		A NEW OBJECT CAN BE CLONED FROM THIS TEMPLATE
	CLASS LIKE A MOLD ALSO (CÁI KHUÔN TẠO OBJECT, TẠO BỨC TƯỢNG) TO CREATE OBJECTS

3. OOP STEPS
3.1 RECOGNIZE OBJECT AROUND YOUR PROBLEM/YOUR WORLD, WITH ATTRIBUTES AND ACTIONS

3.2 CLASSIFY/GROUP/CATEGORIZE TH OBJECTS INTO CLASS (A TEMPLATE/A FROM)
	CREATE CLASS

3.3 CREATE A SPECIAL...

======================================================================

controller\
.java
.java

dto\						entity	enties - a class map directly to table
							ERD
.

=====================================================================
NOTES ON CLASS & OBJECT
- WE NAME EVERYTHING AROUND US - TA ĐẶT TÊN CHO MỌI THỨ QUANH TA
- WE NAME EVERYTHING AROUND US FOR EASY TO COMMUNICATE WITH, TO TALK WITH
- WE NAME FOR A SIMPLE VALUE. A SIMPLE VALUE CONTAINS INSIDE ITSELF, THAT'S ALL 
	AND A COMPLEX VALUE. A COMPLEXX VALUE CONTAINS INSIDE IT MULTIPLE ATTRIBUTES OR VALUES
				THERE IS A STORY WHEN EVER WE TALK ABOUT OBJECT/COMPLEX VALUE
NAME MEANS GIVE IT A LABEL, A NAME TO CALL, A NAME TO COMMUNICATE WITH
	FOR EASY TO REFER TO IT

*SIMPLE VALUE
 PI = 3.14;
 name	simple value
 g = 9.8 (gravity - trọng lực)

VAT = 8%
total = ?????? VND
c = 300.000km/s (e = m * c ^ 2)

*COMPLEX VALUE
messi = {name: Leonardo ..., country: Argentina; yob: 1997, goals: ___, number: 10, ...}
			complex, object
sky = {name: Nguyen Thanh Tung, nick: Son Tung MTP, yob: 1994, hit: ___}
name				object

Student s = new Student("SE1", "An Nguyen", 2003, 8.8);
				a certain student/object
	name to call this student
	s: object variable
	
	new Student(...) -> object

* CLASS IS A TEMPLATE, A MOLD, A BLUEPRINT, A FORM WITH MULTIPLE PLACE HOLDERS NEED TO BE FILLED IN STUDENT:
	ID:_______
	NAME:_____
	YOB:______

TO FILL DATA IN TO GET AN OBJECT, A COMPLEX THING WE NEED A FUNNEL/PHỄU TO GET THE OUTSIDE MATERIAL/DATA,
AND FILL INSIDE THE FORM/MOLD/THE ATTRIBUTES

THE FUNNEL LIKE A METHOD TO RECEIVE MATERIAL/PARAMETER/OUTSIDE VALUE
		THE FUNNEL IN A CLASS IS A SPECIAL METHOD TO CREATE AN OBJECT
							TO CONSTRUCT AN OBJECT
		THE FUNNEL, PHỄU IS SO CALLED CONSTRUCTOR, GÃ TẠO DỰNG, GÃ XÂY DỰNG NÊN OBJECT

* AN WHENEVER YOU HAVE AN OBJECT, YOU CAN SEE IT, SEE SOME ATTRIBUTE INSIDE -> GET() METHOD - SHOW ME!!!
TELL ME A LITTLE ABOUT YOUR SELF

* WHENEVER YOU WANT TO UPDATE YOUR STATE (TRẠNG THÁI, INFO, THÔNG TIN), LIKE CHANGE THE COVER, CHANGE THE BACKGROUND,
TATOO YOUR SKIN, YOU ARE STILL YOU, NO NEW OBJECT IS CREATED
	JUST YOU CHANGE SOME OF YOUR CHARACTER, OBJECT CHARACTER
	-> SET() SETTING(NEW VALUE PUT IN)
	-> SETTIGN(NEW VALUE PUT IN)

OBJECT/CLASS MAY HAVE
	-> FUNNEL - CONSTRUCTOR
	-> GET()
	-> SET()
	-> OTHER METHOD() OR BEHAVIOUR() TO PROCESS SOMETHING

====================================================================================================================

MANTRA TO WORK WITH VARIABLE/VALUE
CÂU THẦN CHÚ

1. DECLARE A VARIABLE (YOU WANT TO STORE A VALUE) WILL TAKE A MEMORY BLOCK
- CÓ KHAI BÁO BIẾN LÀ CÓ 1 VÙNG RAM ĐƯỢC CẤP

2. USING NEW OPERATOR, A NEW/A HUGE MEMORY BLOCK IS ALLOCATED (TO STORE INFO OF AN OBJECT)
- CÓ NEW LÀ CÓ VÙNG NHỚ MỚI ĐƯỢC CẤP, VÙNG RAM MỚI ĐƯỢC CẤP

3. PRIMITIVE/VALUE TYPE VARIABLE (VALUE): TAKE ONLY ONE MEMORY BLOCK
- BIẾN PRIMITIVE/VALUE TYPE DÙNG 1 VÙNG NHỚ

4. OBJECT VALUE/OBJECT DATA TYPE, REFERENCE VARIABLE, POINTER VARIABLE: WILL TAKE TWI MEMORY BLOCKS:
ONE FOR VARIABLE, ONE FOR "NEW" OBJECT
- BIẾN ĐỐI TƯỢNG CẦN 2 VÙNG NHỚ, 1 VÙNG CHO BIẾN, 1 VÙNG CHO NEW

>>>>> WE HAVE TWO KINDS OF ARRAY: VALUE-TYPE/PRIMITIVE ARRAY
				  OBJECT/REFERENCE-TYPE ARRAY

=============================================================================================
RECALL BEFORE THE TET - ÔN TẬP TRƯỚC TẾT

A CLASS ~~~~~~~~~ WILL BE MAPPED TO A TABLE	TO A TABLE IN DATABASE	---->	BEFORE TABLE IS ERD
									ENTITY RELATIONSHIP DIAGRAM
class Student					Student table
{
	public string Id { get; set; }		| Id	| Name	| ...	|
	public string Name { get; set; } 
	...
}

Student s = new Student(...) {Id = ...}	-> a row in a table
					   SQL: insert into Student values(...)

2. HOW TO STORE/MANAGE MULTIPLE OBJECTS IN MEMOY/RAM
- CREATE A CONTAINER, A BOX, A BAG, A ROOM, A SPACE TO STORE MANY/MULTIPLE OBJECTS LIKE IN THE REAL LIFE
class Container/Cabinet/Bag/Box/Space/Room
{
   Student s1;
   Student s2;
   Student s3, s4, s5,...; //not good design, it is not easy to declare many concrete variables
		  	   //khai báo nhiều biến lẻ ko thú vị, ko tiện
   //USING ARRAY!!! FOR EASY AND QUICKLY DECLARATION OF MANY VARIABLES/OBJECTS

   //USING COLLECTIONS IS MORE CONVIENCE THAN USING ARRAY!!!!! THE TOPIC FOR TODAY!!!

   //A STANDARD BOX ALWAYS OFFERS/HAS THE CRUD METHOD (CREATE/PUT A THING INTO THE BOX
							RETRIEVE/READ/PRINT/SHOWALL
							U-UPDATE
							D-UPDATE REMOVE A THING FROM THE BAG)
}

3. 3-LAYER ARCHITECTURE - APP LÀM THEO KIẾN TRÚC 3 LỚP
A SOLUTION ->		  WILL BECOME AN APPLICATION TO SUPPLY FOR THE END USER
LMHT, LQ, CAPCUT, IDM

	- PROJECT 1 (CODE FOR A SPECIFIC TASK - UI RENDER) -> CONSOLE APP (CUI), 
								WEB PAGE (GUI),
								WINDOWS FORMS (GUI)
								.DLL .EXE EXECUTABLE

	- PROJECT 2 (CODE FOR A SPECIFIC TASK - SECURITY) -> CLASS LIBRARY PROJECT
								.DLL ONLY
	- PROJECT 3 (CODE FOR A SPECIFIC TASK - DATABASE) -> CLASS LIBRARY PROJECT
							     	.DLL ONLY
 	- ...

*YEARENDSCHOOLMANAGER SOLUTION
1. MAIN-UI PROJECT -> CONSOLE APP - MAIN() TO RUN		-> .DLL .EXE

2. REPOSITORIES PROJECT -> CLASS LIBRARY PROJECT - CLASS ONLY, NO MAIN() -> .DLL
   -> WORK WITH DATABASE
   ENTITIES FOLDER
	STUDENT CLASS			-> WILL BE MAPPED TO THE TABLE
	LECTURER CLASS			-> WILL BE MAPPED TO THE TABLE

3. SERVICES PROJECT -> CLASS LIBRARY PROJECT - CLASS ONLY, NO MAIN()	-> .DLL
	-> CALL/ASK REPO TO GET DATA
	-> MANUPULATE THE DATA IN RAM/MEMORY
	-> CONNECT TO MAIN-UI TO SHOW DATA TO THE END-USER

	-> CABINET/BOX CLASS
		MANAGE MULTIPLE OBJECTS WITHIN ENTITIES FOLDER
		-> DECLARE CONCRETE VARIABLES
		-> [] USING ARRAY
		-> LIST/COLLECTIONS LIKE IN JAVA

		*CRUD METHODS

1 --> REF TO 3 (TICK ON THE COPY TO LOCAL)
3 --> REF TO 2 (TICK ON THE COPY TO LOCAL)
